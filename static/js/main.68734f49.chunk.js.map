{"version":3,"sources":["components/MainPage/Loading.js","components/MainPage/CurrentWeather.js","components/MainPage/DetailWeather.js","components/Appbar/NavSearchBar.js","App.js","constants/constant.js","serviceWorker.js","index.js"],"names":["Loading","className","CircularProgress","color","CurrentWeather","temperature","city","iconId","description","Grid","item","xl","justify","alignContent","Math","round","DetailWeather","highTemp","lowTemp","sunRise","sunSet","humidity","windSpeed","time","Table","TableBody","TableRow","TableCell","align","moment","unix","format","Navbar","handleChangeCity","handleApiCall","currentCity","Toolbar","Typography","variant","noWrap","style","textTransform","type","placeholder","value","onChange","onClick","App","useState","activeCity","setActiveCity","temperatureUnit","weather","setWeather","location","setLocation","setTemperature","callApi","setCallApi","loading","setLoading","setErrorFlag","useEffect","a","locationUrl","axios","get","res","currentConditions","data","console","log","main","dt","sunrise","sys","sunset","wind","speed","id","temp","temp_max","temp_min","name","error","apiRequest","NavSearchBar","e","target","preventDefault","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.68734f49.chunk.js","sourcesContent":["import React from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function Loading() {\r\n    return (\r\n        <div className='loading'>\r\n            <CircularProgress color=\"secondary\" />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst CurrentWeather = ({\r\n  temperature,\r\n  city,\r\n  iconId,\r\n  description,\r\n  \r\n}) => {\r\n  return (\r\n    <Grid\r\n      item\r\n      xl={6}\r\n      justify=\"center\"\r\n      alignContent=\"center\"\r\n      className=\"main-content\"\r\n    >\r\n      <div className=\"big-data\">\r\n        <i className={`wi wi-owm-${iconId} main-icon`} />\r\n        <h2>{Math.round(temperature)}&deg;</h2>\r\n      </div>\r\n      <div className=\"info\">\r\n        <h2 className=\"main-description\">{description}</h2>\r\n        <h1 className=\"main-city\">{city}</h1>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from \"react\";\r\nimport { Table, TableRow, TableBody, TableCell } from '@material-ui/core';\r\nimport moment from \"moment\";\r\n\r\n\r\nconst DetailWeather = ({ highTemp, lowTemp, sunRise, sunSet, humidity, windSpeed,time }) => {\r\n  return (\r\n    <div className=\"whole-details-area\">\r\n      <h4>Weather Details</h4>\r\n      <Table className=\"weather-details\">\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell>High Temperature</TableCell>\r\n            <TableCell align=\"right\">{highTemp}&deg;</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Low Temperature</TableCell>\r\n            <TableCell align=\"right\">{lowTemp}&deg;</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Humidity</TableCell>\r\n            <TableCell align=\"right\">{humidity}%</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Wind Speed</TableCell>\r\n            <TableCell align= \"right\">{windSpeed}</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Sunrise</TableCell>\r\n            <TableCell align= \"right\">\r\n              {moment.unix(sunRise).format(\"h:mA\")}\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Sunset</TableCell>\r\n            <TableCell align= \"right\">\r\n              {moment.unix(sunSet).format(\"h:mA\")}\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Date</TableCell>\r\n            <TableCell align= \"right\">\r\n              {moment.unix(time).format(\"ddd, h:mA\")}\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailWeather;\r\n","import React from \"react\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Navbar = ({ handleChangeCity, handleApiCall, currentCity }) => {\r\n  return (\r\n    <div className=\"appbar\">\r\n      <Toolbar>\r\n        <Typography\r\n          variant=\"h6\"\r\n          noWrap\r\n          style={{ color: \"#f57b51\", textTransform: \"uppercase\" }}\r\n        >\r\n          Weather\r\n        </Typography>\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search Location\"\r\n            className=\"search-input\"\r\n            value={currentCity}\r\n            onChange={handleChangeCity}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            className=\"search-button\"\r\n            onClick={handleApiCall}\r\n          >\r\n            <i className=\"fas fa-search\" />\r\n          </button>\r\n        </div>\r\n      </Toolbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\nimport * as WEATHER from \"./constants/constant\";\nimport CurrentWeather from \"./components/MainPage/CurrentWeather\";\nimport DetailWeather from \"./components/MainPage/DetailWeather\";\nimport Loading from \"./components/MainPage/Loading\";\nimport NavSearchBar from \"./components/Appbar/NavSearchBar\";\n\n\nfunction App() {\n  const [activeCity, setActiveCity] = useState(\"Kathmandu\");\n  const [temperatureUnit, setTemperatureUnit] = useState(\"metric\");\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState(\"\");\n  const [temperature, setTemperature] = useState({});\n  const [callApi, setCallApi] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const [errorFlag, setErrorFlag] = useState(false);\n\n  const handleChange = (e) => {\n    setActiveCity(e.target.value);\n  };\n\n  const handleApiCall = (e) => {\n    e.preventDefault();\n    !callApi ? setCallApi(true) : setCallApi(false);\n  };\n\n  useEffect(() => {\n    const apiRequest = async () => {\n      setLoading(true);\n      try {\n        const locationUrl = `https://api.openweathermap.org/data/2.5/weather?q=${activeCity}&units=${temperatureUnit}&appid=${WEATHER.API_KEY}`;\n\n        let res = await axios.get(locationUrl);\n        let currentConditions = res.data;\n        console.log(currentConditions);\n\n        setWeather({\n          ...weather,\n          description: currentConditions.weather[0].description,\n          humidity: currentConditions.main.humidity,\n          time: currentConditions.dt,\n          sunrise: currentConditions.sys.sunrise,\n          sunset: currentConditions.sys.sunset,\n          windSpeed: `${currentConditions.wind.speed} ${\n            temperatureUnit === \"metric\" ? \"m/s\" : \"mph\"\n          }`,\n          iconId: currentConditions.weather[0].id,\n        });\n\n        setTemperature({\n          ...temperature,\n          temp: currentConditions.main.temp,\n          highTemp: currentConditions.main.temp_max,\n          lowTemp: currentConditions.main.temp_min,\n        });\n\n        setLocation(currentConditions.name);\n        setLoading(false);\n      } catch (e) {\n        setLoading(false);\n        console.error(e);\n        setErrorFlag(true);\n      }\n    };\n\n    apiRequest();\n  }, [callApi]);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"App\">\n      <NavSearchBar\n        handleChangeCity={handleChange}\n        currentCity={activeCity}\n        handleApiCall={handleApiCall}\n      />\n      <CurrentWeather\n        temperature={temperature.temp}\n        city={location}\n        iconId={weather.iconId}\n        description={weather.description}\n      />\n\n      <DetailWeather\n        highTemp={temperature.highTemp}\n        lowTemp={temperature.lowTemp}\n        sunRise={weather.sunrise}\n        sunSet={weather.sunset}\n        humidity={weather.humidity}\n        windSpeed={weather.windSpeed}\n        time={weather.time}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","\r\nexport const API_KEY = '61a38ab5f2ba3aaad10575b0a3a89414';\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}